---
interface Props {
	el?: string;
  href?: string;
  isCentered?: boolean;
  hasStack?: boolean;
  class?: string;
}

const { 
  el = "a", 
  href = '#', 
  isCentered = false, 
  hasStack = false, 
  class: cssClass = '',
} = Astro.props;

const Element = el;
const elProps = { 
  href, 
  class: [
    'button', isCentered ? 'button--centered' : '', 
    hasStack ? 'button--stack': '', 
    cssClass,
].join(' ') };
// extent css classes with the ones passed in the class prop
 
---
<Element {...elProps}><slot/></Element>

<style is:global>
  .button {
    display: block;
    width: max-content; 

    --bg: var(--rc-gradient-brand);
    --color: var(--rc-onInteraction);

    background: var(--bg);
    background-position: 0 0;
    background-size: 100% 200%;
    color: var(--color);

    text-decoration: none;

    padding: var(--rs-button-y) var(--rs-button-wide-x);

    border-radius: 10em;
    transition: background-position 200ms cubic-bezier(.3, .7, 0 ,1);
  }

  .button--centered {
    margin: 0 auto;
  }

  .button--stack {
    margin-top: var(--rs-button-stack);
   }

   .button:hover {
      background-position: 0 100%;
   }
</style>